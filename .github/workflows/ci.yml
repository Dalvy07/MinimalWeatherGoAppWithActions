name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_CACHE_IMAGE: dalvy07/weather-app-cache

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (for cache)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long

      # Build only for amd64 for quick testing
      - name: Build test image for security scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/Dockerfile
          platforms: linux/amd64  # Only 1 platform for quick test
          secrets: |
            api_key=${{ secrets.WEATHER_API_KEY }}
          tags: test-image:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.DOCKERHUB_CACHE_IMAGE }}:latest
          load: true  # Load image into local Docker daemon for scanning
          push: false  # Don't push test image to registry

      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # Fail the job if vulnerabilities are found

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Analyze vulnerability scan results
        id: vuln-check
        run: |
          echo "Analyzing Trivy vulnerability scan results..."
          
          if [ -f "trivy-results.sarif" ]; then
            echo "Trivy SARIF file found, parsing results..."
            
            total_vulnerabilities=$(jq '[.runs[].results[]] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "Critical/High vulnerabilities found: $total_vulnerabilities"
            echo "vulnerability_count=$total_vulnerabilities" >> $GITHUB_OUTPUT
            
            if [ "$total_vulnerabilities" -gt 0 ]; then
              echo "SECURITY BLOCK: Critical or high severity vulnerabilities detected!"
              echo "Deployment will be blocked for security reasons"
              echo "Total vulnerabilities: $total_vulnerabilities"

              echo "deployment_allowed=false" >> $GITHUB_OUTPUT
            else
              echo "SECURITY PASSED: No critical or high severity vulnerabilities found"
              echo "Image is safe for deployment"

              echo "deployment_allowed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Trivy SARIF file not found - scan may have failed"
            echo "Blocking deployment due to scanner failure"
            echo "deployment_allowed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push multi-platform Docker image
        if: steps.vuln-check.outputs.deployment_allowed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/Dockerfile
          platforms: linux/amd64,linux/arm64  # Build for both amd64 and arm64
          secrets: |
            api_key=${{ secrets.WEATHER_API_KEY }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.DOCKERHUB_CACHE_IMAGE }}:latest
          cache-to: |
            type=registry,ref=${{ env.DOCKERHUB_CACHE_IMAGE }}:latest,mode=max
          push: true


