name: Build and Push Docker Image

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]
    workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_CACHE_IMAGE: dalvy07/weather-app-cache

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (for cache)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,format=short,enable={{github.event_name == 'push'}}
            type=sha,prefix=pr-{{github.event.pull_request.number}}-,format=short,enable={{github.event_name == 'pull_request'}}
            # type=sha,format=short
            # type=ref,event=branch,enable={{!is_default_branch}}
            # type=ref,event=pr
          labels: |
            org.opencontainers.image.title=Weather App
            org.opencontainers.image.description=A minimalistic weather application
            org.opencontainers.image.authors=Vladyslav Liulka <vladlulka3@gmail.com>

      - name: Build Docker image (single build)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .                    # Build context = –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          file: build/Dockerfile        # Dockerfile –≤ –ø–∞–ø–∫–µ build/
          platforms: linux/amd64,linux/arm64  # –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞
          secrets: |
            api_key=${{ secrets.WEATHER_API_KEY }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.DOCKERHUB_CACHE_IMAGE }}:latest
          cache-to: |
            type=registry,ref=${{ env.DOCKERHUB_CACHE_IMAGE }}:latest,mode=max
          # –ö–ª—é—á–µ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          outputs: |
            type=docker,dest=/tmp/image.tar
          sbom: true
          provenance: mode=max

      - name: Load Docker image for testing
        run: |
          echo "Loading Docker image from tar archive..."
          
          docker load --input /tmp/image.tar
          
          TEST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "Using tag for testing: $TEST_TAG"
          echo "TEST_TAG=$TEST_TAG" >> $GITHUB_ENV
          
          echo "Image size: $(docker image inspect "$TEST_TAG" --format='{{.Size}}' | numfmt --to=iec-i --suffix=B)"
          echo "Architecture: $(docker image inspect "$TEST_TAG" --format='{{.Architecture}}')"
        # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —à–∞–≥–∞ –æ–±—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö Docker –∫–æ–º–∞–Ω–¥
        # TEST_TAG —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –æ–±—Ä–∞–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö

      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.TEST_TAG }}          # –°–∫–∞–Ω–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑
          format: 'sarif'                         # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–ª—è GitHub Security
          output: 'trivy-results.sarif'          # –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          severity: 'CRITICAL,HIGH'              # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
          exit-code: '0'                         # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—Ä—É—á–Ω—É—é
        # Trivy - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π open source —Å–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        # –°–∫–∞–Ω–∏—Ä—É–µ—Ç OS –ø–∞–∫–µ—Ç—ã, —è–∑—ã–∫–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ CVE
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ SARIF —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è GitHub Security

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

        # –ó–∞–≥—Ä—É–∂–∞–µ–º SARIF –æ—Ç—á–µ—Ç –≤ GitHub Security tab
        # if: always() –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ Security -> Code scanning alerts

      - name: Analyze vulnerability scan results
        id: vuln-check
        run: |
          echo "Analyzing Trivy vulnerability scan results..."
          
          if [ -f "trivy-results.sarif" ]; then
            echo "Trivy SARIF file found, parsing results..."
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            # Trivy —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –ø–æ severity: 'CRITICAL,HIGH'
            total_vulnerabilities=$(jq '[.runs[].results[]] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "Critical/High vulnerabilities found: $total_vulnerabilities"
            echo "vulnerability_count=$total_vulnerabilities" >> $GITHUB_OUTPUT
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            if [ "$total_vulnerabilities" -gt 0 ]; then
              echo "SECURITY BLOCK: Critical or high severity vulnerabilities detected!"
              echo "Deployment will be blocked for security reasons"
              echo "Total vulnerabilities: $total_vulnerabilities"
              
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
              echo "Sample vulnerabilities:"
              jq -r '.runs[].results[0:3][] | "- " + (.ruleId // "Unknown") + ": " + .message.text' trivy-results.sarif 2>/dev/null || echo "Could not parse vulnerability details"
              
              echo "deployment_blocked=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "SECURITY PASSED: No critical or high severity vulnerabilities found"
              echo "Image is safe for deployment"
              echo "deployment_blocked=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Trivy SARIF file not found - scan may have failed"
            echo "Proceeding with caution (scanner unavailable)"
            echo "deployment_blocked=false" >> $GITHUB_OUTPUT
          fi
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
        # - –ü–∞—Ä—Å–∏–º SARIF –æ—Ç—á–µ—Ç –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        # - –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        # - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

      - name: Publish image to GitHub Container Registry
        if: |
          success() && 
          steps.vuln-check.outputs.deployment_blocked == 'false'
        run: |
          echo "Publishing security-tested image to registry..."
          echo "Publication conditions met:"
          echo "   Build successful"
          echo "   Push to main branch"  
          echo "   Security scan passed"
          echo "   No critical/high vulnerabilities"
          
          # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ —Ç–µ–≥–∏
          docker load --input /tmp/image.tar
          
          echo "Publishing tags:"
          echo '${{ steps.meta.outputs.tags }}' | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "  üè∑Ô∏è Publishing: $tag"
              docker push "$tag"
            fi
          done
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π:
        # - –£—Å–ø–µ—à–Ω–∞—è —Å–±–æ—Ä–∫–∞
        # - Push –≤ main –≤–µ—Ç–∫—É (–Ω–µ PR)
        # - –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ security –ø—Ä–æ–≤–µ—Ä–æ–∫
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑

      